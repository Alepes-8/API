{
	"info": {
		"_postman_id": "ca75c024-c16e-426d-9330-0e1b9a615dbe",
		"name": "Recipe-Manager Test error handling",
		"description": "### Welcome to Postman! This is your first collection. \n\nCollections are your starting point for building and testing APIs. You can use this one to:\n\n• Group related requests\n• Test your API in real-world scenarios\n• Document and share your requests\n\nUpdate the name and overview whenever you’re ready to make it yours.\n\n[Learn more about Postman Collections.](https://learning.postman.com/docs/collections/collections-overview/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47528263",
		"_collection_link": "https://alepes-8-4770212.postman.co/workspace/API-Project-Tests~32327736-1e61-4437-8e92-ba70dd8a32f4/collection/47528263-ca75c024-c16e-426d-9330-0e1b9a615dbe?action=share&source=collection_link&creator=47528263"
	},
	"item": [
		{
			"name": "Post data incorrect input",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"eval(pm.globals.get(\"validateErrorFn\"));",
							"validateError(\"Recipe validation failed\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"titles\": \"Spaghetti Carbonara\",\r\n  \"ingredients\": [\"Pasta\", \"Eggs\", \"Bacon\"],\r\n  \"instructions\": \"Boil pasta, fry bacon, mix with eggs.\",\r\n  \"category\": \"Italian\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}",
					"host": [
						"{{baseURL}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update recipe incorrect ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"eval(pm.globals.get(\"validateErrorFn\"));\r",
							"validateError(\"Cast to ObjectId failed\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Toasted bread with chesse\",\r\n  \"ingredients\": [\"Cheese\", \"bread\", \"Meat\", \"Oregano\", \"Tomato puree\", \"Onion\"],\r\n  \"instructions\": \"Place all ingrediens on bread and toast it.\",\r\n  \"category\": \"Snack\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "noll"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data by wrong id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"eval(pm.globals.get(\"validateErrorFn\"));",
							"validateError(\"Cast to ObjectId failed\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "noid"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Delete data incorrect Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"eval(pm.globals.get(\"validateErrorFn\"));",
							"validateError(\"Cast to ObjectId failed\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Spaghetti Carbonara\",\r\n  \"ingredients\": [\"Pasta\", \"Eggs\", \"Bacon\"],\r\n  \"instructions\": \"Boil pasta, fry bacon, mix with eggs.\",\r\n  \"category\": \"Italian\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/:id",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "noId"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function validateError(expectedMessage) {\r",
					"    let jsonData = pm.response.json();\r",
					"\r",
					"    pm.test(\"Error field exists\", function () {\r",
					"        pm.expect(jsonData).to.have.property(\"error\");\r",
					"    });\r",
					"\r",
					"    if (!expectedMessage) {\r",
					"        console.warn(\"Expected message is empty or undefined\");\r",
					"        return;\r",
					"    }\r",
					"\r",
					"    pm.test(\"Error message matches expected failure\", function () {\r",
					"        pm.expect(jsonData.error).to.include(expectedMessage);\r",
					"    });\r",
					"}\r",
					"\r",
					"pm.globals.set(\"validateErrorFn\", validateError.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:5000/api/recipes"
		},
		{
			"key": "recipeId",
			"value": "",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		}
	]
}